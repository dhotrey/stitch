"""
---------------------------------------------------------------------------------
Encoder's Order of Execution:

Run.py -> Setup.py -> Gets Input from user for BaseQRData and SecretData. Finds values that
    |       are required for Image Generator -> REDIS
    |
Conversion.go -> Converts SecretData and Chunks it according to the parameters
& Chunking.go    passed by setup.py to REDIS
    |
    |
ImageGenerator.py -> Gets called X no of times depending on the number of chunks
    |                generated by Chunking.go and places all the pngs in a folder
    |
gif.go/ mp4.go -> Converts the aforementioned imgs in the folder to a gif or mp4
---------------------------------------------------------------------------------
"""

import redis
import subprocess

import setup
from utils.ImageEncoder import main as ImageEncoder
from utils.redis_utils import ReadChunkData

if __name__ == "__main__":
    BlockSize = 100

    BaseQRData = input("Enter Base QR Code Data: ")
    # SecretData = input("Enter Secret Data to Embed: ")

    rdb = redis.Redis()

    # Run Setup.py - to get initial parameters
    QRMatrix, LenofQRMatrix, ViableBlockAltCoordLst, UniqueFolder = setup.main(
        BaseQRData
    )

    # # Set Secret Data to Redis
    # rdb.set("SecretData", SecretData)
    rdb.set("ChunkingSize", len(ViableBlockAltCoordLst))

    result = subprocess.run("./ares", capture_output=True, text=True)
    print("finished chunker execution")
    print(f"Return code {result.returncode}")

    data = ReadChunkData()

    # Run for loop to generate qr codes
    for i, d in enumerate(data):
        ImageEncoder(
            QRMatrix,
            LenofQRMatrix,
            ViableBlockAltCoordLst,
            UniqueFolder,
            i,
            BlockSize,
            d,
        )

    # Run conversion to gif
    # TODO
