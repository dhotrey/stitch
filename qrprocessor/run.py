"""
---------------------------------------------------------------------------------
Encoder's Order of Execution:

Run.py -> Setup.py -> Gets Input from user for BaseQRData and SecretData. Finds values that
    |       are required for Image Generator -> REDIS
    |
Conversion.go -> Converts SecretData and Chunks it according to the parameters
& Chunking.go    passed by setup.py to REDIS
    |
    |
ImageGenerator.py -> Gets called X no of times depending on the number of chunks
    |                generated by Chunking.go and places all the pngs in a folder
    |
gif.go/ mp4.go -> Converts the aforementioned imgs in the folder to a gif or mp4
---------------------------------------------------------------------------------
"""

import redis
import subprocess
from copy import deepcopy

import setup
from utils.ImageEncoder import main as ImageEncoder
from utils.redis_utils import ReadChunkData

if __name__ == "__main__":
    BlockSize = 100

    BaseQRData = input("Enter Base QR Code Data: ")
    inFile = input("Enter path to input file: ")
    # SecretData = input("Enter Secret Data to Embed: ")

    rdb = redis.Redis()

    # Run Setup.py - to get initial parameters
    QRMatrix, LenofQRMatrix, ViableBlockAltCoordLst, UniqueFolder = setup.main(
        BaseQRData
    )

    # # Set Secret Data to Redis
    # rdb.set("SecretData", SecretData)
    rdb.set("ChunkingSize", len(ViableBlockAltCoordLst))
    rdb.set("UniqueFolder", UniqueFolder)

    result = subprocess.run(["./bin/ares", inFile], capture_output=True, text=True)
    print("finished chunker execution")
    print(f"Return code {result.returncode}")
    data = ReadChunkData()

    Len_MaxBitsPerQR = len(ViableBlockAltCoordLst)
    i = 0
    # Run for loop to generate qr codes
    for d in data:
        d = "".join(f"{byte:08b}" for byte in d)
        while d:  # Time complexity n^2 cause aryan doesnt remember his own code
            chunk = d[:Len_MaxBitsPerQR]
            d = d[Len_MaxBitsPerQR:]
            print(chunk)
            ImageEncoder(
                deepcopy(QRMatrix),
                LenofQRMatrix,
                ViableBlockAltCoordLst,
                UniqueFolder,
                i,
                BlockSize,
                chunk,
            )
            i += 1

    print("Created gifs successfully!!!")
    print("\n\n\n\n")
    print("Creating GIF")
    qrFolder = f"Output/{UniqueFolder}"
    gifResult = subprocess.run(
        [
            "ffmpeg",
            "-framerate",
            "5",
            "-i",
            f"{qrFolder}/%d.png",
            "-vf",
            "scale=640:-1",
            "-loop",
            "0",
            "output.gif",
        ]
    )

    print("finished gif creation")
    print(f"Return code {gifResult.returncode}")
